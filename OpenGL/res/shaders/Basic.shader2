#shader vertex
#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;

out vec3 Position;
out vec3 Normal;

uniform mat4 model;
uniform mat4 u_MVP;

void main()
{
    Position = vec3(model * vec4(position, 1.0));
    Normal = normal;

    gl_Position = u_MVP * vec4(position, 1.0f);
   
};

#shader fragment
#version 330 core

layout(location = 0) out vec4 color;

in vec3 Position;
in vec3 Normal;

uniform vec3 lightPos; 
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
	const float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - Position);
    float diff = max(dot( lightDir, norm), 0.0);
    vec3 diffuse = diff * lightColor;

    vec3 result = (ambient + diffuse) * objectColor;
    color = vec4(result, 1.0);
};